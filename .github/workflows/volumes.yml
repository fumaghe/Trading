name: Volume Watch (every 30m)

on:
  schedule:
    - cron: "*/30 * * * *"   # ogni 30 minuti (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  volwatch:
    runs-on: ubuntu-latest
    env:
      PYTHONIOENCODING: "utf-8"
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID:   ${{ secrets.TG_CHAT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Scegli UNA delle due:
      # (A) usa direttamente test4.py ogni 30' (self-contained)
      - name: Run volume_watch.py (from-screener)
        # Se gli script sono in una sottocartella, decommenta e imposta:
        # working-directory: scripts
        run: |
          python volume_watch.py --mode from-screener --min-liq 200000 --workers 12 --max-tickers-scan 40 --dominance 0.30 --rps-cg 0.5 --rps-ds 2.0 --funnel-show 100 --skip-unchanged-days 0

      # (B) IN ALTERNATIVA: se run_pipeline salva state/top_pairs.json
      # - name: Run volume_watch.py (from-file)
      #   run: |
      #     python volume_watch.py --mode from-file --pairs-file state/top_pairs.json

      - name: Send Telegram — volume watch (chunked)
        if: env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != ''
        shell: bash
        run: |
          set -e
          FILE="state/telegram/msg_volwatch.html"
          if [ ! -f "$FILE" ]; then
            echo "⚠️ Nessun messaggio di volume watch generato."
            exit 0
          fi

          python - <<'PY'
import os, time, requests

TOKEN = os.environ["TG_BOT_TOKEN"]
CHAT  = os.environ["TG_CHAT_ID"]
API   = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

path = "state/telegram/msg_volwatch.html"
with open(path, encoding="utf-8") as f:
    text = f.read()

MAX = 3800  # margine sotto il limite 4096 di Telegram
parts = []

# Spezza per blocchi: header + tabellone + blocchi per-coin (prefisso "• ")
sep = "\n\n• "
if sep in text:
    head, rest = text.split(sep, 1)
    blocks = [head] + ["• " + b for b in rest.split("\n\n• ")]
else:
    blocks = [text]

buf = ""
for blk in blocks:
    if len(buf) + len(blk) + 2 > MAX:
        if buf:
            parts.append(buf)
        buf = blk
    else:
        buf = (buf + "\n\n" + blk) if buf else blk
if buf:
    parts.append(buf)

for i, p in enumerate(parts, 1):
    r = requests.post(API, data={
        "chat_id": CHAT,
        "text": p,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    })
    ok = False
    try:
        r.raise_for_status()
        j = r.json()
        ok = j.get("ok", False)
    except Exception:
        pass
    if not ok:
        print(f"[Send fail part {i}] {r.text}")
    time.sleep(0.8)
PY

      - name: Commit state (volwatch)
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add state/volwatch/*.json state/telegram/msg_volwatch.html || true
          if ! git diff --cached --quiet; then
            git commit -m "volwatch: update $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          else:
            echo "No state changes to commit."
          fi
