name: Daily Screener (run_pipeline)

on:
  schedule:
    - cron: "30 */8 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  run-screener:
    runs-on: ubuntu-latest
    env:
      PYTHONIOENCODING: "utf-8"
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID:   ${{ secrets.TG_CHAT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Run only at 09:30 and 17:30 Europe/Rome
        if: ${{ github.event_name == 'schedule' }}
        run: |
          NOW=$(TZ=Europe/Rome date +'%H:%M')
          echo "Europe/Rome now: $NOW"
          if [ "$NOW" != "09:30" ] && [ "$NOW" != "17:30" ]; then
            echo "Not target time — exiting without running."
            exit 0
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # aggiungo web3 perché defiFunzionante.py lo usa
            pip install requests tenacity rich web3
          fi

      - name: Run run_pipeline.py
        id: screener
        shell: bash
        run: |
          set -o pipefail
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

          CMD="python run_pipeline.py --rpc https://bsc-dataseed.binance.org --min-liq 20000 --workers 12 --max-tickers-scan 40 --dominance 0.30 --rps-cg 0.5 --rps-ds 2.0 --funnel-show 100"
          echo "Running: $CMD"

          OUTFILE=out.txt
          ERRFILE=err.txt

          bash -lc "$CMD" >"$OUTFILE" 2>"$ERRFILE" || true
          CODE=$?
          echo "exit_code=$CODE" >> "$GITHUB_OUTPUT"

          # Sanifica e prepara messaggio Telegram
          SAN_OUT="out.sanitized.txt"
          SAN_ERR="err.sanitized.txt"
          tr -d '\000' < "$OUTFILE" > "$SAN_OUT" || true
          tr -d '\000' < "$ERRFILE" > "$SAN_ERR" || true

          # Compone un messaggio unico (stdout + eventuale coda di stderr)
          TAIL_ERR="$(tail -n 50 "$SAN_ERR" 2>/dev/null || true)"
          {
            echo "==== run_pipeline output ===="
            cat "$SAN_OUT"
            if [ -s "$SAN_ERR" ]; then
              echo ""
              echo "---- last 50 lines of STDERR ----"
              echo "$TAIL_ERR"
            fi
          } > msg.txt

          # Troncamento per Telegram
          DELIM="EOF_MSG_$(date +%s%N)"
          {
            printf "msg_main<<%s\n" "$DELIM"
            head -c 3900 msg.txt
            printf "\n%s\n" "$DELIM"
          } >> "$GITHUB_OUTPUT"

      # (OPZIONALE) Se non hai più file di stato da committare, puoi rimuovere del tutto questo step.
      # Lo lascio commentato per chiarezza.
      # - name: Persist screener state to repo
      #   run: |
      #     git config user.name  "github-actions[bot]"
      #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git add -A state/last_all3.json state/index.json || true
      #     git commit -m "chore(screener): update state [skip ci]" || echo "No changes to commit"
      #     git push || echo "Nothing to push"

      - name: Send Telegram — run_pipeline output
        if: env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != ''
        shell: bash
        run: |
          API="https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage"
          EXIT="${{ steps.screener.outputs.exit_code }}"
          if [ "$EXIT" = "0" ]; then
            HEADER="✅ Screener OK"
          else
            HEADER="❌ Screener ERROR ($EXIT)"
          fi
          TEXT="$(printf "%s\n\n%s" "$HEADER" "${{ steps.screener.outputs.msg_main }}")"
          TRUNC="$(printf "%s" "$TEXT" | head -c 3900)"
          curl -sS -X POST "$API" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=$TRUNC" \
            -d "disable_web_page_preview=true" \
            -d "parse_mode=HTML" \
          || echo "Telegram send failed"

      - name: Upload logs (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-pipeline-logs
          path: |
            out.txt
            err.txt
            msg.txt
